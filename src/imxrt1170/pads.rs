// Generated by iomuxc.py
#![allow(non_camel_case_types)]

/// Pads with the prefix GPIO_EMC_B1.
pub mod gpio_emc_b1 {

    const GPIO_EMC_B1_00_MUX_ADDR: u32 = 0x400e8010;
    const GPIO_EMC_B1_00_PAD_ADDR: u32 = 0x400e8254;
    pub type GPIO_EMC_B1_00 = crate::Pad<GPIO_EMC_B1_00_MUX_ADDR, GPIO_EMC_B1_00_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 0;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 0;
    }

    const GPIO_EMC_B1_01_MUX_ADDR: u32 = 0x400e8014;
    const GPIO_EMC_B1_01_PAD_ADDR: u32 = 0x400e8258;
    pub type GPIO_EMC_B1_01 = crate::Pad<GPIO_EMC_B1_01_MUX_ADDR, GPIO_EMC_B1_01_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 1;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 1;
    }

    const GPIO_EMC_B1_02_MUX_ADDR: u32 = 0x400e8018;
    const GPIO_EMC_B1_02_PAD_ADDR: u32 = 0x400e825c;
    pub type GPIO_EMC_B1_02 = crate::Pad<GPIO_EMC_B1_02_MUX_ADDR, GPIO_EMC_B1_02_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 2;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 2;
    }

    const GPIO_EMC_B1_03_MUX_ADDR: u32 = 0x400e801c;
    const GPIO_EMC_B1_03_PAD_ADDR: u32 = 0x400e8260;
    pub type GPIO_EMC_B1_03 = crate::Pad<GPIO_EMC_B1_03_MUX_ADDR, GPIO_EMC_B1_03_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 3;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 3;
    }

    const GPIO_EMC_B1_04_MUX_ADDR: u32 = 0x400e8020;
    const GPIO_EMC_B1_04_PAD_ADDR: u32 = 0x400e8264;
    pub type GPIO_EMC_B1_04 = crate::Pad<GPIO_EMC_B1_04_MUX_ADDR, GPIO_EMC_B1_04_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 4;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 4;
    }

    const GPIO_EMC_B1_05_MUX_ADDR: u32 = 0x400e8024;
    const GPIO_EMC_B1_05_PAD_ADDR: u32 = 0x400e8268;
    pub type GPIO_EMC_B1_05 = crate::Pad<GPIO_EMC_B1_05_MUX_ADDR, GPIO_EMC_B1_05_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 5;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 5;
    }

    const GPIO_EMC_B1_06_MUX_ADDR: u32 = 0x400e8028;
    const GPIO_EMC_B1_06_PAD_ADDR: u32 = 0x400e826c;
    pub type GPIO_EMC_B1_06 = crate::Pad<GPIO_EMC_B1_06_MUX_ADDR, GPIO_EMC_B1_06_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_06 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 6;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_06 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 6;
    }

    const GPIO_EMC_B1_07_MUX_ADDR: u32 = 0x400e802c;
    const GPIO_EMC_B1_07_PAD_ADDR: u32 = 0x400e8270;
    pub type GPIO_EMC_B1_07 = crate::Pad<GPIO_EMC_B1_07_MUX_ADDR, GPIO_EMC_B1_07_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_07 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 7;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_07 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 7;
    }

    const GPIO_EMC_B1_08_MUX_ADDR: u32 = 0x400e8030;
    const GPIO_EMC_B1_08_PAD_ADDR: u32 = 0x400e8274;
    pub type GPIO_EMC_B1_08 = crate::Pad<GPIO_EMC_B1_08_MUX_ADDR, GPIO_EMC_B1_08_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_08 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 8;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_08 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 8;
    }

    const GPIO_EMC_B1_09_MUX_ADDR: u32 = 0x400e8034;
    const GPIO_EMC_B1_09_PAD_ADDR: u32 = 0x400e8278;
    pub type GPIO_EMC_B1_09 = crate::Pad<GPIO_EMC_B1_09_MUX_ADDR, GPIO_EMC_B1_09_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_09 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 9;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_09 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 9;
    }

    const GPIO_EMC_B1_10_MUX_ADDR: u32 = 0x400e8038;
    const GPIO_EMC_B1_10_PAD_ADDR: u32 = 0x400e827c;
    pub type GPIO_EMC_B1_10 = crate::Pad<GPIO_EMC_B1_10_MUX_ADDR, GPIO_EMC_B1_10_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_10 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 10;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_10 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 10;
    }

    const GPIO_EMC_B1_11_MUX_ADDR: u32 = 0x400e803c;
    const GPIO_EMC_B1_11_PAD_ADDR: u32 = 0x400e8280;
    pub type GPIO_EMC_B1_11 = crate::Pad<GPIO_EMC_B1_11_MUX_ADDR, GPIO_EMC_B1_11_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_11 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 11;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_11 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 11;
    }

    const GPIO_EMC_B1_12_MUX_ADDR: u32 = 0x400e8040;
    const GPIO_EMC_B1_12_PAD_ADDR: u32 = 0x400e8284;
    pub type GPIO_EMC_B1_12 = crate::Pad<GPIO_EMC_B1_12_MUX_ADDR, GPIO_EMC_B1_12_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_12 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 12;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_12 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 12;
    }

    const GPIO_EMC_B1_13_MUX_ADDR: u32 = 0x400e8044;
    const GPIO_EMC_B1_13_PAD_ADDR: u32 = 0x400e8288;
    pub type GPIO_EMC_B1_13 = crate::Pad<GPIO_EMC_B1_13_MUX_ADDR, GPIO_EMC_B1_13_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_13 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 13;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_13 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 13;
    }

    const GPIO_EMC_B1_14_MUX_ADDR: u32 = 0x400e8048;
    const GPIO_EMC_B1_14_PAD_ADDR: u32 = 0x400e828c;
    pub type GPIO_EMC_B1_14 = crate::Pad<GPIO_EMC_B1_14_MUX_ADDR, GPIO_EMC_B1_14_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_14 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 14;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_14 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 14;
    }

    const GPIO_EMC_B1_15_MUX_ADDR: u32 = 0x400e804c;
    const GPIO_EMC_B1_15_PAD_ADDR: u32 = 0x400e8290;
    pub type GPIO_EMC_B1_15 = crate::Pad<GPIO_EMC_B1_15_MUX_ADDR, GPIO_EMC_B1_15_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_15 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 15;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_15 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 15;
    }

    const GPIO_EMC_B1_16_MUX_ADDR: u32 = 0x400e8050;
    const GPIO_EMC_B1_16_PAD_ADDR: u32 = 0x400e8294;
    pub type GPIO_EMC_B1_16 = crate::Pad<GPIO_EMC_B1_16_MUX_ADDR, GPIO_EMC_B1_16_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_16 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 16;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_16 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 16;
    }

    const GPIO_EMC_B1_17_MUX_ADDR: u32 = 0x400e8054;
    const GPIO_EMC_B1_17_PAD_ADDR: u32 = 0x400e8298;
    pub type GPIO_EMC_B1_17 = crate::Pad<GPIO_EMC_B1_17_MUX_ADDR, GPIO_EMC_B1_17_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_17 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 17;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_17 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 17;
    }

    const GPIO_EMC_B1_18_MUX_ADDR: u32 = 0x400e8058;
    const GPIO_EMC_B1_18_PAD_ADDR: u32 = 0x400e829c;
    pub type GPIO_EMC_B1_18 = crate::Pad<GPIO_EMC_B1_18_MUX_ADDR, GPIO_EMC_B1_18_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_18 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 18;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_18 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 18;
    }

    const GPIO_EMC_B1_19_MUX_ADDR: u32 = 0x400e805c;
    const GPIO_EMC_B1_19_PAD_ADDR: u32 = 0x400e82a0;
    pub type GPIO_EMC_B1_19 = crate::Pad<GPIO_EMC_B1_19_MUX_ADDR, GPIO_EMC_B1_19_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_19 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 19;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_19 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 19;
    }

    const GPIO_EMC_B1_20_MUX_ADDR: u32 = 0x400e8060;
    const GPIO_EMC_B1_20_PAD_ADDR: u32 = 0x400e82a4;
    pub type GPIO_EMC_B1_20 = crate::Pad<GPIO_EMC_B1_20_MUX_ADDR, GPIO_EMC_B1_20_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_20 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 20;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_20 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 20;
    }

    const GPIO_EMC_B1_21_MUX_ADDR: u32 = 0x400e8064;
    const GPIO_EMC_B1_21_PAD_ADDR: u32 = 0x400e82a8;
    pub type GPIO_EMC_B1_21 = crate::Pad<GPIO_EMC_B1_21_MUX_ADDR, GPIO_EMC_B1_21_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_21 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 21;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_21 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 21;
    }

    const GPIO_EMC_B1_22_MUX_ADDR: u32 = 0x400e8068;
    const GPIO_EMC_B1_22_PAD_ADDR: u32 = 0x400e82ac;
    pub type GPIO_EMC_B1_22 = crate::Pad<GPIO_EMC_B1_22_MUX_ADDR, GPIO_EMC_B1_22_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_22 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 22;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_22 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 22;
    }

    const GPIO_EMC_B1_23_MUX_ADDR: u32 = 0x400e806c;
    const GPIO_EMC_B1_23_PAD_ADDR: u32 = 0x400e82b0;
    pub type GPIO_EMC_B1_23 = crate::Pad<GPIO_EMC_B1_23_MUX_ADDR, GPIO_EMC_B1_23_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_23 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 23;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_23 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 23;
    }

    const GPIO_EMC_B1_24_MUX_ADDR: u32 = 0x400e8070;
    const GPIO_EMC_B1_24_PAD_ADDR: u32 = 0x400e82b4;
    pub type GPIO_EMC_B1_24 = crate::Pad<GPIO_EMC_B1_24_MUX_ADDR, GPIO_EMC_B1_24_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_24 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 24;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_24 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 24;
    }

    const GPIO_EMC_B1_25_MUX_ADDR: u32 = 0x400e8074;
    const GPIO_EMC_B1_25_PAD_ADDR: u32 = 0x400e82b8;
    pub type GPIO_EMC_B1_25 = crate::Pad<GPIO_EMC_B1_25_MUX_ADDR, GPIO_EMC_B1_25_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_25 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 25;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_25 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 25;
    }

    const GPIO_EMC_B1_26_MUX_ADDR: u32 = 0x400e8078;
    const GPIO_EMC_B1_26_PAD_ADDR: u32 = 0x400e82bc;
    pub type GPIO_EMC_B1_26 = crate::Pad<GPIO_EMC_B1_26_MUX_ADDR, GPIO_EMC_B1_26_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_26 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 26;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_26 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 26;
    }

    const GPIO_EMC_B1_27_MUX_ADDR: u32 = 0x400e807c;
    const GPIO_EMC_B1_27_PAD_ADDR: u32 = 0x400e82c0;
    pub type GPIO_EMC_B1_27 = crate::Pad<GPIO_EMC_B1_27_MUX_ADDR, GPIO_EMC_B1_27_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_27 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 27;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_27 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 27;
    }

    const GPIO_EMC_B1_28_MUX_ADDR: u32 = 0x400e8080;
    const GPIO_EMC_B1_28_PAD_ADDR: u32 = 0x400e82c4;
    pub type GPIO_EMC_B1_28 = crate::Pad<GPIO_EMC_B1_28_MUX_ADDR, GPIO_EMC_B1_28_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_28 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 28;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_28 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 28;
    }

    const GPIO_EMC_B1_29_MUX_ADDR: u32 = 0x400e8084;
    const GPIO_EMC_B1_29_PAD_ADDR: u32 = 0x400e82c8;
    pub type GPIO_EMC_B1_29 = crate::Pad<GPIO_EMC_B1_29_MUX_ADDR, GPIO_EMC_B1_29_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_29 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 29;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_29 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 29;
    }

    const GPIO_EMC_B1_30_MUX_ADDR: u32 = 0x400e8088;
    const GPIO_EMC_B1_30_PAD_ADDR: u32 = 0x400e82cc;
    pub type GPIO_EMC_B1_30 = crate::Pad<GPIO_EMC_B1_30_MUX_ADDR, GPIO_EMC_B1_30_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_30 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 30;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_30 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 30;
    }

    const GPIO_EMC_B1_31_MUX_ADDR: u32 = 0x400e808c;
    const GPIO_EMC_B1_31_PAD_ADDR: u32 = 0x400e82d0;
    pub type GPIO_EMC_B1_31 = crate::Pad<GPIO_EMC_B1_31_MUX_ADDR, GPIO_EMC_B1_31_PAD_ADDR>;

    impl crate::gpio::Pin<1> for GPIO_EMC_B1_31 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 31;
    }

    impl crate::gpio::Pin<7> for GPIO_EMC_B1_31 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 31;
    }

    const GPIO_EMC_B1_32_MUX_ADDR: u32 = 0x400e8090;
    const GPIO_EMC_B1_32_PAD_ADDR: u32 = 0x400e82d4;
    pub type GPIO_EMC_B1_32 = crate::Pad<GPIO_EMC_B1_32_MUX_ADDR, GPIO_EMC_B1_32_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_32 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 0;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_32 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 0;
    }

    const GPIO_EMC_B1_33_MUX_ADDR: u32 = 0x400e8094;
    const GPIO_EMC_B1_33_PAD_ADDR: u32 = 0x400e82d8;
    pub type GPIO_EMC_B1_33 = crate::Pad<GPIO_EMC_B1_33_MUX_ADDR, GPIO_EMC_B1_33_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_33 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 1;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_33 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 1;
    }

    const GPIO_EMC_B1_34_MUX_ADDR: u32 = 0x400e8098;
    const GPIO_EMC_B1_34_PAD_ADDR: u32 = 0x400e82dc;
    pub type GPIO_EMC_B1_34 = crate::Pad<GPIO_EMC_B1_34_MUX_ADDR, GPIO_EMC_B1_34_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_34 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 2;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_34 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 2;
    }

    const GPIO_EMC_B1_35_MUX_ADDR: u32 = 0x400e809c;
    const GPIO_EMC_B1_35_PAD_ADDR: u32 = 0x400e82e0;
    pub type GPIO_EMC_B1_35 = crate::Pad<GPIO_EMC_B1_35_MUX_ADDR, GPIO_EMC_B1_35_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_35 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 3;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_35 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 3;
    }

    const GPIO_EMC_B1_36_MUX_ADDR: u32 = 0x400e80a0;
    const GPIO_EMC_B1_36_PAD_ADDR: u32 = 0x400e82e4;
    pub type GPIO_EMC_B1_36 = crate::Pad<GPIO_EMC_B1_36_MUX_ADDR, GPIO_EMC_B1_36_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_36 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 4;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_36 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 4;
    }

    const GPIO_EMC_B1_37_MUX_ADDR: u32 = 0x400e80a4;
    const GPIO_EMC_B1_37_PAD_ADDR: u32 = 0x400e82e8;
    pub type GPIO_EMC_B1_37 = crate::Pad<GPIO_EMC_B1_37_MUX_ADDR, GPIO_EMC_B1_37_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_37 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 5;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_37 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 5;
    }

    const GPIO_EMC_B1_38_MUX_ADDR: u32 = 0x400e80a8;
    const GPIO_EMC_B1_38_PAD_ADDR: u32 = 0x400e82ec;
    pub type GPIO_EMC_B1_38 = crate::Pad<GPIO_EMC_B1_38_MUX_ADDR, GPIO_EMC_B1_38_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_38 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 6;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_38 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 6;
    }

    const GPIO_EMC_B1_39_MUX_ADDR: u32 = 0x400e80ac;
    const GPIO_EMC_B1_39_PAD_ADDR: u32 = 0x400e82f0;
    pub type GPIO_EMC_B1_39 = crate::Pad<GPIO_EMC_B1_39_MUX_ADDR, GPIO_EMC_B1_39_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_39 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 7;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_39 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 7;
    }

    const GPIO_EMC_B1_40_MUX_ADDR: u32 = 0x400e80b0;
    const GPIO_EMC_B1_40_PAD_ADDR: u32 = 0x400e82f4;
    pub type GPIO_EMC_B1_40 = crate::Pad<GPIO_EMC_B1_40_MUX_ADDR, GPIO_EMC_B1_40_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_40 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 8;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_40 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 8;
    }

    const GPIO_EMC_B1_41_MUX_ADDR: u32 = 0x400e80b4;
    const GPIO_EMC_B1_41_PAD_ADDR: u32 = 0x400e82f8;
    pub type GPIO_EMC_B1_41 = crate::Pad<GPIO_EMC_B1_41_MUX_ADDR, GPIO_EMC_B1_41_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B1_41 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 9;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B1_41 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 9;
    }

    /// All pads with prefix GPIO_EMC_B1.
    pub struct Pads {
        pub p00: GPIO_EMC_B1_00,
        pub p01: GPIO_EMC_B1_01,
        pub p02: GPIO_EMC_B1_02,
        pub p03: GPIO_EMC_B1_03,
        pub p04: GPIO_EMC_B1_04,
        pub p05: GPIO_EMC_B1_05,
        pub p06: GPIO_EMC_B1_06,
        pub p07: GPIO_EMC_B1_07,
        pub p08: GPIO_EMC_B1_08,
        pub p09: GPIO_EMC_B1_09,
        pub p10: GPIO_EMC_B1_10,
        pub p11: GPIO_EMC_B1_11,
        pub p12: GPIO_EMC_B1_12,
        pub p13: GPIO_EMC_B1_13,
        pub p14: GPIO_EMC_B1_14,
        pub p15: GPIO_EMC_B1_15,
        pub p16: GPIO_EMC_B1_16,
        pub p17: GPIO_EMC_B1_17,
        pub p18: GPIO_EMC_B1_18,
        pub p19: GPIO_EMC_B1_19,
        pub p20: GPIO_EMC_B1_20,
        pub p21: GPIO_EMC_B1_21,
        pub p22: GPIO_EMC_B1_22,
        pub p23: GPIO_EMC_B1_23,
        pub p24: GPIO_EMC_B1_24,
        pub p25: GPIO_EMC_B1_25,
        pub p26: GPIO_EMC_B1_26,
        pub p27: GPIO_EMC_B1_27,
        pub p28: GPIO_EMC_B1_28,
        pub p29: GPIO_EMC_B1_29,
        pub p30: GPIO_EMC_B1_30,
        pub p31: GPIO_EMC_B1_31,
        pub p32: GPIO_EMC_B1_32,
        pub p33: GPIO_EMC_B1_33,
        pub p34: GPIO_EMC_B1_34,
        pub p35: GPIO_EMC_B1_35,
        pub p36: GPIO_EMC_B1_36,
        pub p37: GPIO_EMC_B1_37,
        pub p38: GPIO_EMC_B1_38,
        pub p39: GPIO_EMC_B1_39,
        pub p40: GPIO_EMC_B1_40,
        pub p41: GPIO_EMC_B1_41,
    }
    /// Erased pads with prefix GPIO_EMC_B1.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 42];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_EMC_B1_00::new(),
                p01: GPIO_EMC_B1_01::new(),
                p02: GPIO_EMC_B1_02::new(),
                p03: GPIO_EMC_B1_03::new(),
                p04: GPIO_EMC_B1_04::new(),
                p05: GPIO_EMC_B1_05::new(),
                p06: GPIO_EMC_B1_06::new(),
                p07: GPIO_EMC_B1_07::new(),
                p08: GPIO_EMC_B1_08::new(),
                p09: GPIO_EMC_B1_09::new(),
                p10: GPIO_EMC_B1_10::new(),
                p11: GPIO_EMC_B1_11::new(),
                p12: GPIO_EMC_B1_12::new(),
                p13: GPIO_EMC_B1_13::new(),
                p14: GPIO_EMC_B1_14::new(),
                p15: GPIO_EMC_B1_15::new(),
                p16: GPIO_EMC_B1_16::new(),
                p17: GPIO_EMC_B1_17::new(),
                p18: GPIO_EMC_B1_18::new(),
                p19: GPIO_EMC_B1_19::new(),
                p20: GPIO_EMC_B1_20::new(),
                p21: GPIO_EMC_B1_21::new(),
                p22: GPIO_EMC_B1_22::new(),
                p23: GPIO_EMC_B1_23::new(),
                p24: GPIO_EMC_B1_24::new(),
                p25: GPIO_EMC_B1_25::new(),
                p26: GPIO_EMC_B1_26::new(),
                p27: GPIO_EMC_B1_27::new(),
                p28: GPIO_EMC_B1_28::new(),
                p29: GPIO_EMC_B1_29::new(),
                p30: GPIO_EMC_B1_30::new(),
                p31: GPIO_EMC_B1_31::new(),
                p32: GPIO_EMC_B1_32::new(),
                p33: GPIO_EMC_B1_33::new(),
                p34: GPIO_EMC_B1_34::new(),
                p35: GPIO_EMC_B1_35::new(),
                p36: GPIO_EMC_B1_36::new(),
                p37: GPIO_EMC_B1_37::new(),
                p38: GPIO_EMC_B1_38::new(),
                p39: GPIO_EMC_B1_39::new(),
                p40: GPIO_EMC_B1_40::new(),
                p41: GPIO_EMC_B1_41::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
                self.p06.erase(),
                self.p07.erase(),
                self.p08.erase(),
                self.p09.erase(),
                self.p10.erase(),
                self.p11.erase(),
                self.p12.erase(),
                self.p13.erase(),
                self.p14.erase(),
                self.p15.erase(),
                self.p16.erase(),
                self.p17.erase(),
                self.p18.erase(),
                self.p19.erase(),
                self.p20.erase(),
                self.p21.erase(),
                self.p22.erase(),
                self.p23.erase(),
                self.p24.erase(),
                self.p25.erase(),
                self.p26.erase(),
                self.p27.erase(),
                self.p28.erase(),
                self.p29.erase(),
                self.p30.erase(),
                self.p31.erase(),
                self.p32.erase(),
                self.p33.erase(),
                self.p34.erase(),
                self.p35.erase(),
                self.p36.erase(),
                self.p37.erase(),
                self.p38.erase(),
                self.p39.erase(),
                self.p40.erase(),
                self.p41.erase(),
            ]
        }
    }
}

/// Pads with the prefix GPIO_EMC_B2.
pub mod gpio_emc_b2 {

    const GPIO_EMC_B2_00_MUX_ADDR: u32 = 0x400e80b8;
    const GPIO_EMC_B2_00_PAD_ADDR: u32 = 0x400e82fc;
    pub type GPIO_EMC_B2_00 = crate::Pad<GPIO_EMC_B2_00_MUX_ADDR, GPIO_EMC_B2_00_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 10;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 10;
    }

    const GPIO_EMC_B2_01_MUX_ADDR: u32 = 0x400e80bc;
    const GPIO_EMC_B2_01_PAD_ADDR: u32 = 0x400e8300;
    pub type GPIO_EMC_B2_01 = crate::Pad<GPIO_EMC_B2_01_MUX_ADDR, GPIO_EMC_B2_01_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 11;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 11;
    }

    const GPIO_EMC_B2_02_MUX_ADDR: u32 = 0x400e80c0;
    const GPIO_EMC_B2_02_PAD_ADDR: u32 = 0x400e8304;
    pub type GPIO_EMC_B2_02 = crate::Pad<GPIO_EMC_B2_02_MUX_ADDR, GPIO_EMC_B2_02_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 12;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 12;
    }

    const GPIO_EMC_B2_03_MUX_ADDR: u32 = 0x400e80c4;
    const GPIO_EMC_B2_03_PAD_ADDR: u32 = 0x400e8308;
    pub type GPIO_EMC_B2_03 = crate::Pad<GPIO_EMC_B2_03_MUX_ADDR, GPIO_EMC_B2_03_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 13;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 13;
    }

    const GPIO_EMC_B2_04_MUX_ADDR: u32 = 0x400e80c8;
    const GPIO_EMC_B2_04_PAD_ADDR: u32 = 0x400e830c;
    pub type GPIO_EMC_B2_04 = crate::Pad<GPIO_EMC_B2_04_MUX_ADDR, GPIO_EMC_B2_04_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 14;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 14;
    }

    const GPIO_EMC_B2_05_MUX_ADDR: u32 = 0x400e80cc;
    const GPIO_EMC_B2_05_PAD_ADDR: u32 = 0x400e8310;
    pub type GPIO_EMC_B2_05 = crate::Pad<GPIO_EMC_B2_05_MUX_ADDR, GPIO_EMC_B2_05_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 15;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 15;
    }

    const GPIO_EMC_B2_06_MUX_ADDR: u32 = 0x400e80d0;
    const GPIO_EMC_B2_06_PAD_ADDR: u32 = 0x400e8314;
    pub type GPIO_EMC_B2_06 = crate::Pad<GPIO_EMC_B2_06_MUX_ADDR, GPIO_EMC_B2_06_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_06 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 16;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_06 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 16;
    }

    const GPIO_EMC_B2_07_MUX_ADDR: u32 = 0x400e80d4;
    const GPIO_EMC_B2_07_PAD_ADDR: u32 = 0x400e8318;
    pub type GPIO_EMC_B2_07 = crate::Pad<GPIO_EMC_B2_07_MUX_ADDR, GPIO_EMC_B2_07_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_07 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 17;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_07 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 17;
    }

    const GPIO_EMC_B2_08_MUX_ADDR: u32 = 0x400e80d8;
    const GPIO_EMC_B2_08_PAD_ADDR: u32 = 0x400e831c;
    pub type GPIO_EMC_B2_08 = crate::Pad<GPIO_EMC_B2_08_MUX_ADDR, GPIO_EMC_B2_08_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_08 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 18;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_08 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 18;
    }

    const GPIO_EMC_B2_09_MUX_ADDR: u32 = 0x400e80dc;
    const GPIO_EMC_B2_09_PAD_ADDR: u32 = 0x400e8320;
    pub type GPIO_EMC_B2_09 = crate::Pad<GPIO_EMC_B2_09_MUX_ADDR, GPIO_EMC_B2_09_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_09 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 19;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_09 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 19;
    }

    const GPIO_EMC_B2_10_MUX_ADDR: u32 = 0x400e80e0;
    const GPIO_EMC_B2_10_PAD_ADDR: u32 = 0x400e8324;
    pub type GPIO_EMC_B2_10 = crate::Pad<GPIO_EMC_B2_10_MUX_ADDR, GPIO_EMC_B2_10_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_10 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 20;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_10 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 20;
    }

    const GPIO_EMC_B2_11_MUX_ADDR: u32 = 0x400e80e4;
    const GPIO_EMC_B2_11_PAD_ADDR: u32 = 0x400e8328;
    pub type GPIO_EMC_B2_11 = crate::Pad<GPIO_EMC_B2_11_MUX_ADDR, GPIO_EMC_B2_11_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_11 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 21;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_11 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 21;
    }

    const GPIO_EMC_B2_12_MUX_ADDR: u32 = 0x400e80e8;
    const GPIO_EMC_B2_12_PAD_ADDR: u32 = 0x400e832c;
    pub type GPIO_EMC_B2_12 = crate::Pad<GPIO_EMC_B2_12_MUX_ADDR, GPIO_EMC_B2_12_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_12 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 22;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_12 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 22;
    }

    const GPIO_EMC_B2_13_MUX_ADDR: u32 = 0x400e80ec;
    const GPIO_EMC_B2_13_PAD_ADDR: u32 = 0x400e8330;
    pub type GPIO_EMC_B2_13 = crate::Pad<GPIO_EMC_B2_13_MUX_ADDR, GPIO_EMC_B2_13_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_13 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 23;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_13 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 23;
    }

    const GPIO_EMC_B2_14_MUX_ADDR: u32 = 0x400e80f0;
    const GPIO_EMC_B2_14_PAD_ADDR: u32 = 0x400e8334;
    pub type GPIO_EMC_B2_14 = crate::Pad<GPIO_EMC_B2_14_MUX_ADDR, GPIO_EMC_B2_14_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_14 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 24;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_14 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 24;
    }

    const GPIO_EMC_B2_15_MUX_ADDR: u32 = 0x400e80f4;
    const GPIO_EMC_B2_15_PAD_ADDR: u32 = 0x400e8338;
    pub type GPIO_EMC_B2_15 = crate::Pad<GPIO_EMC_B2_15_MUX_ADDR, GPIO_EMC_B2_15_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_15 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 25;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_15 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 25;
    }

    const GPIO_EMC_B2_16_MUX_ADDR: u32 = 0x400e80f8;
    const GPIO_EMC_B2_16_PAD_ADDR: u32 = 0x400e833c;
    pub type GPIO_EMC_B2_16 = crate::Pad<GPIO_EMC_B2_16_MUX_ADDR, GPIO_EMC_B2_16_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_16 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 26;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_16 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 26;
    }

    const GPIO_EMC_B2_17_MUX_ADDR: u32 = 0x400e80fc;
    const GPIO_EMC_B2_17_PAD_ADDR: u32 = 0x400e8340;
    pub type GPIO_EMC_B2_17 = crate::Pad<GPIO_EMC_B2_17_MUX_ADDR, GPIO_EMC_B2_17_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_17 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 27;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_17 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 27;
    }

    const GPIO_EMC_B2_18_MUX_ADDR: u32 = 0x400e8100;
    const GPIO_EMC_B2_18_PAD_ADDR: u32 = 0x400e8344;
    pub type GPIO_EMC_B2_18 = crate::Pad<GPIO_EMC_B2_18_MUX_ADDR, GPIO_EMC_B2_18_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_18 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 28;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_18 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 28;
    }

    const GPIO_EMC_B2_19_MUX_ADDR: u32 = 0x400e8104;
    const GPIO_EMC_B2_19_PAD_ADDR: u32 = 0x400e8348;
    pub type GPIO_EMC_B2_19 = crate::Pad<GPIO_EMC_B2_19_MUX_ADDR, GPIO_EMC_B2_19_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_19 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 29;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_19 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 29;
    }

    const GPIO_EMC_B2_20_MUX_ADDR: u32 = 0x400e8108;
    const GPIO_EMC_B2_20_PAD_ADDR: u32 = 0x400e834c;
    pub type GPIO_EMC_B2_20 = crate::Pad<GPIO_EMC_B2_20_MUX_ADDR, GPIO_EMC_B2_20_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_EMC_B2_20 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 30;
    }

    impl crate::gpio::Pin<8> for GPIO_EMC_B2_20 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 30;
    }

    /// All pads with prefix GPIO_EMC_B2.
    pub struct Pads {
        pub p00: GPIO_EMC_B2_00,
        pub p01: GPIO_EMC_B2_01,
        pub p02: GPIO_EMC_B2_02,
        pub p03: GPIO_EMC_B2_03,
        pub p04: GPIO_EMC_B2_04,
        pub p05: GPIO_EMC_B2_05,
        pub p06: GPIO_EMC_B2_06,
        pub p07: GPIO_EMC_B2_07,
        pub p08: GPIO_EMC_B2_08,
        pub p09: GPIO_EMC_B2_09,
        pub p10: GPIO_EMC_B2_10,
        pub p11: GPIO_EMC_B2_11,
        pub p12: GPIO_EMC_B2_12,
        pub p13: GPIO_EMC_B2_13,
        pub p14: GPIO_EMC_B2_14,
        pub p15: GPIO_EMC_B2_15,
        pub p16: GPIO_EMC_B2_16,
        pub p17: GPIO_EMC_B2_17,
        pub p18: GPIO_EMC_B2_18,
        pub p19: GPIO_EMC_B2_19,
        pub p20: GPIO_EMC_B2_20,
    }
    /// Erased pads with prefix GPIO_EMC_B2.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 21];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_EMC_B2_00::new(),
                p01: GPIO_EMC_B2_01::new(),
                p02: GPIO_EMC_B2_02::new(),
                p03: GPIO_EMC_B2_03::new(),
                p04: GPIO_EMC_B2_04::new(),
                p05: GPIO_EMC_B2_05::new(),
                p06: GPIO_EMC_B2_06::new(),
                p07: GPIO_EMC_B2_07::new(),
                p08: GPIO_EMC_B2_08::new(),
                p09: GPIO_EMC_B2_09::new(),
                p10: GPIO_EMC_B2_10::new(),
                p11: GPIO_EMC_B2_11::new(),
                p12: GPIO_EMC_B2_12::new(),
                p13: GPIO_EMC_B2_13::new(),
                p14: GPIO_EMC_B2_14::new(),
                p15: GPIO_EMC_B2_15::new(),
                p16: GPIO_EMC_B2_16::new(),
                p17: GPIO_EMC_B2_17::new(),
                p18: GPIO_EMC_B2_18::new(),
                p19: GPIO_EMC_B2_19::new(),
                p20: GPIO_EMC_B2_20::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
                self.p06.erase(),
                self.p07.erase(),
                self.p08.erase(),
                self.p09.erase(),
                self.p10.erase(),
                self.p11.erase(),
                self.p12.erase(),
                self.p13.erase(),
                self.p14.erase(),
                self.p15.erase(),
                self.p16.erase(),
                self.p17.erase(),
                self.p18.erase(),
                self.p19.erase(),
                self.p20.erase(),
            ]
        }
    }
}

/// Pads with the prefix GPIO_AD.
pub mod gpio_ad {

    const GPIO_AD_00_MUX_ADDR: u32 = 0x400e810c;
    const GPIO_AD_00_PAD_ADDR: u32 = 0x400e8350;
    pub type GPIO_AD_00 = crate::Pad<GPIO_AD_00_MUX_ADDR, GPIO_AD_00_PAD_ADDR>;

    impl crate::gpio::Pin<2> for GPIO_AD_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 31;
    }

    impl crate::gpio::Pin<8> for GPIO_AD_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 31;
    }

    const GPIO_AD_01_MUX_ADDR: u32 = 0x400e8110;
    const GPIO_AD_01_PAD_ADDR: u32 = 0x400e8354;
    pub type GPIO_AD_01 = crate::Pad<GPIO_AD_01_MUX_ADDR, GPIO_AD_01_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 0;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 0;
    }

    const GPIO_AD_02_MUX_ADDR: u32 = 0x400e8114;
    const GPIO_AD_02_PAD_ADDR: u32 = 0x400e8358;
    pub type GPIO_AD_02 = crate::Pad<GPIO_AD_02_MUX_ADDR, GPIO_AD_02_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 1;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 1;
    }

    const GPIO_AD_03_MUX_ADDR: u32 = 0x400e8118;
    const GPIO_AD_03_PAD_ADDR: u32 = 0x400e835c;
    pub type GPIO_AD_03 = crate::Pad<GPIO_AD_03_MUX_ADDR, GPIO_AD_03_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 2;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 2;
    }

    const GPIO_AD_04_MUX_ADDR: u32 = 0x400e811c;
    const GPIO_AD_04_PAD_ADDR: u32 = 0x400e8360;
    pub type GPIO_AD_04 = crate::Pad<GPIO_AD_04_MUX_ADDR, GPIO_AD_04_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 3;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 3;
    }

    const GPIO_AD_05_MUX_ADDR: u32 = 0x400e8120;
    const GPIO_AD_05_PAD_ADDR: u32 = 0x400e8364;
    pub type GPIO_AD_05 = crate::Pad<GPIO_AD_05_MUX_ADDR, GPIO_AD_05_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 4;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 4;
    }

    const GPIO_AD_06_MUX_ADDR: u32 = 0x400e8124;
    const GPIO_AD_06_PAD_ADDR: u32 = 0x400e8368;
    pub type GPIO_AD_06 = crate::Pad<GPIO_AD_06_MUX_ADDR, GPIO_AD_06_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_06 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 5;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_06 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 5;
    }

    const GPIO_AD_07_MUX_ADDR: u32 = 0x400e8128;
    const GPIO_AD_07_PAD_ADDR: u32 = 0x400e836c;
    pub type GPIO_AD_07 = crate::Pad<GPIO_AD_07_MUX_ADDR, GPIO_AD_07_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_07 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 6;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_07 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 6;
    }

    const GPIO_AD_08_MUX_ADDR: u32 = 0x400e812c;
    const GPIO_AD_08_PAD_ADDR: u32 = 0x400e8370;
    pub type GPIO_AD_08 = crate::Pad<GPIO_AD_08_MUX_ADDR, GPIO_AD_08_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_08 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 7;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_08 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 7;
    }

    const GPIO_AD_09_MUX_ADDR: u32 = 0x400e8130;
    const GPIO_AD_09_PAD_ADDR: u32 = 0x400e8374;
    pub type GPIO_AD_09 = crate::Pad<GPIO_AD_09_MUX_ADDR, GPIO_AD_09_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_09 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 8;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_09 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 8;
    }

    const GPIO_AD_10_MUX_ADDR: u32 = 0x400e8134;
    const GPIO_AD_10_PAD_ADDR: u32 = 0x400e8378;
    pub type GPIO_AD_10 = crate::Pad<GPIO_AD_10_MUX_ADDR, GPIO_AD_10_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_10 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 9;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_10 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 9;
    }

    const GPIO_AD_11_MUX_ADDR: u32 = 0x400e8138;
    const GPIO_AD_11_PAD_ADDR: u32 = 0x400e837c;
    pub type GPIO_AD_11 = crate::Pad<GPIO_AD_11_MUX_ADDR, GPIO_AD_11_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_11 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 10;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_11 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 10;
    }

    const GPIO_AD_12_MUX_ADDR: u32 = 0x400e813c;
    const GPIO_AD_12_PAD_ADDR: u32 = 0x400e8380;
    pub type GPIO_AD_12 = crate::Pad<GPIO_AD_12_MUX_ADDR, GPIO_AD_12_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_12 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 11;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_12 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 11;
    }

    const GPIO_AD_13_MUX_ADDR: u32 = 0x400e8140;
    const GPIO_AD_13_PAD_ADDR: u32 = 0x400e8384;
    pub type GPIO_AD_13 = crate::Pad<GPIO_AD_13_MUX_ADDR, GPIO_AD_13_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_13 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 12;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_13 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 12;
    }

    const GPIO_AD_14_MUX_ADDR: u32 = 0x400e8144;
    const GPIO_AD_14_PAD_ADDR: u32 = 0x400e8388;
    pub type GPIO_AD_14 = crate::Pad<GPIO_AD_14_MUX_ADDR, GPIO_AD_14_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_14 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 13;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_14 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 13;
    }

    const GPIO_AD_15_MUX_ADDR: u32 = 0x400e8148;
    const GPIO_AD_15_PAD_ADDR: u32 = 0x400e838c;
    pub type GPIO_AD_15 = crate::Pad<GPIO_AD_15_MUX_ADDR, GPIO_AD_15_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_15 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 14;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_15 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 14;
    }

    const GPIO_AD_16_MUX_ADDR: u32 = 0x400e814c;
    const GPIO_AD_16_PAD_ADDR: u32 = 0x400e8390;
    pub type GPIO_AD_16 = crate::Pad<GPIO_AD_16_MUX_ADDR, GPIO_AD_16_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_16 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 15;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_16 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 15;
    }

    const GPIO_AD_17_MUX_ADDR: u32 = 0x400e8150;
    const GPIO_AD_17_PAD_ADDR: u32 = 0x400e8394;
    pub type GPIO_AD_17 = crate::Pad<GPIO_AD_17_MUX_ADDR, GPIO_AD_17_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_17 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 16;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_17 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 16;
    }

    const GPIO_AD_18_MUX_ADDR: u32 = 0x400e8154;
    const GPIO_AD_18_PAD_ADDR: u32 = 0x400e8398;
    pub type GPIO_AD_18 = crate::Pad<GPIO_AD_18_MUX_ADDR, GPIO_AD_18_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_18 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 17;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_18 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 17;
    }

    const GPIO_AD_19_MUX_ADDR: u32 = 0x400e8158;
    const GPIO_AD_19_PAD_ADDR: u32 = 0x400e839c;
    pub type GPIO_AD_19 = crate::Pad<GPIO_AD_19_MUX_ADDR, GPIO_AD_19_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_19 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 18;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_19 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 18;
    }

    const GPIO_AD_20_MUX_ADDR: u32 = 0x400e815c;
    const GPIO_AD_20_PAD_ADDR: u32 = 0x400e83a0;
    pub type GPIO_AD_20 = crate::Pad<GPIO_AD_20_MUX_ADDR, GPIO_AD_20_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_20 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 19;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_20 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 19;
    }

    const GPIO_AD_21_MUX_ADDR: u32 = 0x400e8160;
    const GPIO_AD_21_PAD_ADDR: u32 = 0x400e83a4;
    pub type GPIO_AD_21 = crate::Pad<GPIO_AD_21_MUX_ADDR, GPIO_AD_21_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_21 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 20;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_21 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 20;
    }

    const GPIO_AD_22_MUX_ADDR: u32 = 0x400e8164;
    const GPIO_AD_22_PAD_ADDR: u32 = 0x400e83a8;
    pub type GPIO_AD_22 = crate::Pad<GPIO_AD_22_MUX_ADDR, GPIO_AD_22_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_22 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 21;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_22 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 21;
    }

    const GPIO_AD_23_MUX_ADDR: u32 = 0x400e8168;
    const GPIO_AD_23_PAD_ADDR: u32 = 0x400e83ac;
    pub type GPIO_AD_23 = crate::Pad<GPIO_AD_23_MUX_ADDR, GPIO_AD_23_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_23 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 22;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_23 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 22;
    }

    const GPIO_AD_24_MUX_ADDR: u32 = 0x400e816c;
    const GPIO_AD_24_PAD_ADDR: u32 = 0x400e83b0;
    pub type GPIO_AD_24 = crate::Pad<GPIO_AD_24_MUX_ADDR, GPIO_AD_24_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_24 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 23;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_24 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 23;
    }

    const GPIO_AD_25_MUX_ADDR: u32 = 0x400e8170;
    const GPIO_AD_25_PAD_ADDR: u32 = 0x400e83b4;
    pub type GPIO_AD_25 = crate::Pad<GPIO_AD_25_MUX_ADDR, GPIO_AD_25_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_25 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 24;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_25 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 24;
    }

    const GPIO_AD_26_MUX_ADDR: u32 = 0x400e8174;
    const GPIO_AD_26_PAD_ADDR: u32 = 0x400e83b8;
    pub type GPIO_AD_26 = crate::Pad<GPIO_AD_26_MUX_ADDR, GPIO_AD_26_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_26 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 25;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_26 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 25;
    }

    const GPIO_AD_27_MUX_ADDR: u32 = 0x400e8178;
    const GPIO_AD_27_PAD_ADDR: u32 = 0x400e83bc;
    pub type GPIO_AD_27 = crate::Pad<GPIO_AD_27_MUX_ADDR, GPIO_AD_27_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_27 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 26;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_27 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 26;
    }

    const GPIO_AD_28_MUX_ADDR: u32 = 0x400e817c;
    const GPIO_AD_28_PAD_ADDR: u32 = 0x400e83c0;
    pub type GPIO_AD_28 = crate::Pad<GPIO_AD_28_MUX_ADDR, GPIO_AD_28_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_28 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 27;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_28 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 27;
    }

    const GPIO_AD_29_MUX_ADDR: u32 = 0x400e8180;
    const GPIO_AD_29_PAD_ADDR: u32 = 0x400e83c4;
    pub type GPIO_AD_29 = crate::Pad<GPIO_AD_29_MUX_ADDR, GPIO_AD_29_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_29 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 28;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_29 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 28;
    }

    const GPIO_AD_30_MUX_ADDR: u32 = 0x400e8184;
    const GPIO_AD_30_PAD_ADDR: u32 = 0x400e83c8;
    pub type GPIO_AD_30 = crate::Pad<GPIO_AD_30_MUX_ADDR, GPIO_AD_30_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_30 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 29;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_30 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 29;
    }

    const GPIO_AD_31_MUX_ADDR: u32 = 0x400e8188;
    const GPIO_AD_31_PAD_ADDR: u32 = 0x400e83cc;
    pub type GPIO_AD_31 = crate::Pad<GPIO_AD_31_MUX_ADDR, GPIO_AD_31_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_31 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 30;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_31 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 30;
    }

    const GPIO_AD_32_MUX_ADDR: u32 = 0x400e818c;
    const GPIO_AD_32_PAD_ADDR: u32 = 0x400e83d0;
    pub type GPIO_AD_32 = crate::Pad<GPIO_AD_32_MUX_ADDR, GPIO_AD_32_PAD_ADDR>;

    impl crate::gpio::Pin<3> for GPIO_AD_32 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 31;
    }

    impl crate::gpio::Pin<9> for GPIO_AD_32 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 31;
    }

    const GPIO_AD_33_MUX_ADDR: u32 = 0x400e8190;
    const GPIO_AD_33_PAD_ADDR: u32 = 0x400e83d4;
    pub type GPIO_AD_33 = crate::Pad<GPIO_AD_33_MUX_ADDR, GPIO_AD_33_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_AD_33 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 0;
    }

    impl crate::gpio::Pin<10> for GPIO_AD_33 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 0;
    }

    const GPIO_AD_34_MUX_ADDR: u32 = 0x400e8194;
    const GPIO_AD_34_PAD_ADDR: u32 = 0x400e83d8;
    pub type GPIO_AD_34 = crate::Pad<GPIO_AD_34_MUX_ADDR, GPIO_AD_34_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_AD_34 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 1;
    }

    impl crate::gpio::Pin<10> for GPIO_AD_34 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 1;
    }

    const GPIO_AD_35_MUX_ADDR: u32 = 0x400e8198;
    const GPIO_AD_35_PAD_ADDR: u32 = 0x400e83dc;
    pub type GPIO_AD_35 = crate::Pad<GPIO_AD_35_MUX_ADDR, GPIO_AD_35_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_AD_35 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 2;
    }

    impl crate::gpio::Pin<10> for GPIO_AD_35 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 2;
    }

    /// All pads with prefix GPIO_AD.
    pub struct Pads {
        pub p00: GPIO_AD_00,
        pub p01: GPIO_AD_01,
        pub p02: GPIO_AD_02,
        pub p03: GPIO_AD_03,
        pub p04: GPIO_AD_04,
        pub p05: GPIO_AD_05,
        pub p06: GPIO_AD_06,
        pub p07: GPIO_AD_07,
        pub p08: GPIO_AD_08,
        pub p09: GPIO_AD_09,
        pub p10: GPIO_AD_10,
        pub p11: GPIO_AD_11,
        pub p12: GPIO_AD_12,
        pub p13: GPIO_AD_13,
        pub p14: GPIO_AD_14,
        pub p15: GPIO_AD_15,
        pub p16: GPIO_AD_16,
        pub p17: GPIO_AD_17,
        pub p18: GPIO_AD_18,
        pub p19: GPIO_AD_19,
        pub p20: GPIO_AD_20,
        pub p21: GPIO_AD_21,
        pub p22: GPIO_AD_22,
        pub p23: GPIO_AD_23,
        pub p24: GPIO_AD_24,
        pub p25: GPIO_AD_25,
        pub p26: GPIO_AD_26,
        pub p27: GPIO_AD_27,
        pub p28: GPIO_AD_28,
        pub p29: GPIO_AD_29,
        pub p30: GPIO_AD_30,
        pub p31: GPIO_AD_31,
        pub p32: GPIO_AD_32,
        pub p33: GPIO_AD_33,
        pub p34: GPIO_AD_34,
        pub p35: GPIO_AD_35,
    }
    /// Erased pads with prefix GPIO_AD.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 36];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_AD_00::new(),
                p01: GPIO_AD_01::new(),
                p02: GPIO_AD_02::new(),
                p03: GPIO_AD_03::new(),
                p04: GPIO_AD_04::new(),
                p05: GPIO_AD_05::new(),
                p06: GPIO_AD_06::new(),
                p07: GPIO_AD_07::new(),
                p08: GPIO_AD_08::new(),
                p09: GPIO_AD_09::new(),
                p10: GPIO_AD_10::new(),
                p11: GPIO_AD_11::new(),
                p12: GPIO_AD_12::new(),
                p13: GPIO_AD_13::new(),
                p14: GPIO_AD_14::new(),
                p15: GPIO_AD_15::new(),
                p16: GPIO_AD_16::new(),
                p17: GPIO_AD_17::new(),
                p18: GPIO_AD_18::new(),
                p19: GPIO_AD_19::new(),
                p20: GPIO_AD_20::new(),
                p21: GPIO_AD_21::new(),
                p22: GPIO_AD_22::new(),
                p23: GPIO_AD_23::new(),
                p24: GPIO_AD_24::new(),
                p25: GPIO_AD_25::new(),
                p26: GPIO_AD_26::new(),
                p27: GPIO_AD_27::new(),
                p28: GPIO_AD_28::new(),
                p29: GPIO_AD_29::new(),
                p30: GPIO_AD_30::new(),
                p31: GPIO_AD_31::new(),
                p32: GPIO_AD_32::new(),
                p33: GPIO_AD_33::new(),
                p34: GPIO_AD_34::new(),
                p35: GPIO_AD_35::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
                self.p06.erase(),
                self.p07.erase(),
                self.p08.erase(),
                self.p09.erase(),
                self.p10.erase(),
                self.p11.erase(),
                self.p12.erase(),
                self.p13.erase(),
                self.p14.erase(),
                self.p15.erase(),
                self.p16.erase(),
                self.p17.erase(),
                self.p18.erase(),
                self.p19.erase(),
                self.p20.erase(),
                self.p21.erase(),
                self.p22.erase(),
                self.p23.erase(),
                self.p24.erase(),
                self.p25.erase(),
                self.p26.erase(),
                self.p27.erase(),
                self.p28.erase(),
                self.p29.erase(),
                self.p30.erase(),
                self.p31.erase(),
                self.p32.erase(),
                self.p33.erase(),
                self.p34.erase(),
                self.p35.erase(),
            ]
        }
    }
}

/// Pads with the prefix GPIO_SD_B1.
pub mod gpio_sd_b1 {

    const GPIO_SD_B1_00_MUX_ADDR: u32 = 0x400e819c;
    const GPIO_SD_B1_00_PAD_ADDR: u32 = 0x400e83e0;
    pub type GPIO_SD_B1_00 = crate::Pad<GPIO_SD_B1_00_MUX_ADDR, GPIO_SD_B1_00_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B1_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 3;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B1_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 3;
    }

    const GPIO_SD_B1_01_MUX_ADDR: u32 = 0x400e81a0;
    const GPIO_SD_B1_01_PAD_ADDR: u32 = 0x400e83e4;
    pub type GPIO_SD_B1_01 = crate::Pad<GPIO_SD_B1_01_MUX_ADDR, GPIO_SD_B1_01_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B1_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 4;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B1_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 4;
    }

    const GPIO_SD_B1_02_MUX_ADDR: u32 = 0x400e81a4;
    const GPIO_SD_B1_02_PAD_ADDR: u32 = 0x400e83e8;
    pub type GPIO_SD_B1_02 = crate::Pad<GPIO_SD_B1_02_MUX_ADDR, GPIO_SD_B1_02_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B1_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 5;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B1_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 5;
    }

    const GPIO_SD_B1_03_MUX_ADDR: u32 = 0x400e81a8;
    const GPIO_SD_B1_03_PAD_ADDR: u32 = 0x400e83ec;
    pub type GPIO_SD_B1_03 = crate::Pad<GPIO_SD_B1_03_MUX_ADDR, GPIO_SD_B1_03_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B1_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 6;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B1_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 6;
    }

    const GPIO_SD_B1_04_MUX_ADDR: u32 = 0x400e81ac;
    const GPIO_SD_B1_04_PAD_ADDR: u32 = 0x400e83f0;
    pub type GPIO_SD_B1_04 = crate::Pad<GPIO_SD_B1_04_MUX_ADDR, GPIO_SD_B1_04_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B1_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 7;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B1_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 7;
    }

    const GPIO_SD_B1_05_MUX_ADDR: u32 = 0x400e81b0;
    const GPIO_SD_B1_05_PAD_ADDR: u32 = 0x400e83f4;
    pub type GPIO_SD_B1_05 = crate::Pad<GPIO_SD_B1_05_MUX_ADDR, GPIO_SD_B1_05_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B1_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 8;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B1_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 8;
    }

    /// All pads with prefix GPIO_SD_B1.
    pub struct Pads {
        pub p00: GPIO_SD_B1_00,
        pub p01: GPIO_SD_B1_01,
        pub p02: GPIO_SD_B1_02,
        pub p03: GPIO_SD_B1_03,
        pub p04: GPIO_SD_B1_04,
        pub p05: GPIO_SD_B1_05,
    }
    /// Erased pads with prefix GPIO_SD_B1.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 6];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_SD_B1_00::new(),
                p01: GPIO_SD_B1_01::new(),
                p02: GPIO_SD_B1_02::new(),
                p03: GPIO_SD_B1_03::new(),
                p04: GPIO_SD_B1_04::new(),
                p05: GPIO_SD_B1_05::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
            ]
        }
    }
}

/// Pads with the prefix GPIO_SD_B2.
pub mod gpio_sd_b2 {

    const GPIO_SD_B2_00_MUX_ADDR: u32 = 0x400e81b4;
    const GPIO_SD_B2_00_PAD_ADDR: u32 = 0x400e83f8;
    pub type GPIO_SD_B2_00 = crate::Pad<GPIO_SD_B2_00_MUX_ADDR, GPIO_SD_B2_00_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 9;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 9;
    }

    const GPIO_SD_B2_01_MUX_ADDR: u32 = 0x400e81b8;
    const GPIO_SD_B2_01_PAD_ADDR: u32 = 0x400e83fc;
    pub type GPIO_SD_B2_01 = crate::Pad<GPIO_SD_B2_01_MUX_ADDR, GPIO_SD_B2_01_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 10;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 10;
    }

    const GPIO_SD_B2_02_MUX_ADDR: u32 = 0x400e81bc;
    const GPIO_SD_B2_02_PAD_ADDR: u32 = 0x400e8400;
    pub type GPIO_SD_B2_02 = crate::Pad<GPIO_SD_B2_02_MUX_ADDR, GPIO_SD_B2_02_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 11;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 11;
    }

    const GPIO_SD_B2_03_MUX_ADDR: u32 = 0x400e81c0;
    const GPIO_SD_B2_03_PAD_ADDR: u32 = 0x400e8404;
    pub type GPIO_SD_B2_03 = crate::Pad<GPIO_SD_B2_03_MUX_ADDR, GPIO_SD_B2_03_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 12;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 12;
    }

    const GPIO_SD_B2_04_MUX_ADDR: u32 = 0x400e81c4;
    const GPIO_SD_B2_04_PAD_ADDR: u32 = 0x400e8408;
    pub type GPIO_SD_B2_04 = crate::Pad<GPIO_SD_B2_04_MUX_ADDR, GPIO_SD_B2_04_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 13;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 13;
    }

    const GPIO_SD_B2_05_MUX_ADDR: u32 = 0x400e81c8;
    const GPIO_SD_B2_05_PAD_ADDR: u32 = 0x400e840c;
    pub type GPIO_SD_B2_05 = crate::Pad<GPIO_SD_B2_05_MUX_ADDR, GPIO_SD_B2_05_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 14;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 14;
    }

    const GPIO_SD_B2_06_MUX_ADDR: u32 = 0x400e81cc;
    const GPIO_SD_B2_06_PAD_ADDR: u32 = 0x400e8410;
    pub type GPIO_SD_B2_06 = crate::Pad<GPIO_SD_B2_06_MUX_ADDR, GPIO_SD_B2_06_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_06 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 15;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_06 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 15;
    }

    const GPIO_SD_B2_07_MUX_ADDR: u32 = 0x400e81d0;
    const GPIO_SD_B2_07_PAD_ADDR: u32 = 0x400e8414;
    pub type GPIO_SD_B2_07 = crate::Pad<GPIO_SD_B2_07_MUX_ADDR, GPIO_SD_B2_07_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_07 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 16;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_07 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 16;
    }

    const GPIO_SD_B2_08_MUX_ADDR: u32 = 0x400e81d4;
    const GPIO_SD_B2_08_PAD_ADDR: u32 = 0x400e8418;
    pub type GPIO_SD_B2_08 = crate::Pad<GPIO_SD_B2_08_MUX_ADDR, GPIO_SD_B2_08_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_08 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 17;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_08 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 17;
    }

    const GPIO_SD_B2_09_MUX_ADDR: u32 = 0x400e81d8;
    const GPIO_SD_B2_09_PAD_ADDR: u32 = 0x400e841c;
    pub type GPIO_SD_B2_09 = crate::Pad<GPIO_SD_B2_09_MUX_ADDR, GPIO_SD_B2_09_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_09 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 18;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_09 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 18;
    }

    const GPIO_SD_B2_10_MUX_ADDR: u32 = 0x400e81dc;
    const GPIO_SD_B2_10_PAD_ADDR: u32 = 0x400e8420;
    pub type GPIO_SD_B2_10 = crate::Pad<GPIO_SD_B2_10_MUX_ADDR, GPIO_SD_B2_10_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_10 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 19;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_10 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 19;
    }

    const GPIO_SD_B2_11_MUX_ADDR: u32 = 0x400e81e0;
    const GPIO_SD_B2_11_PAD_ADDR: u32 = 0x400e8424;
    pub type GPIO_SD_B2_11 = crate::Pad<GPIO_SD_B2_11_MUX_ADDR, GPIO_SD_B2_11_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_SD_B2_11 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 20;
    }

    impl crate::gpio::Pin<10> for GPIO_SD_B2_11 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 20;
    }

    /// All pads with prefix GPIO_SD_B2.
    pub struct Pads {
        pub p00: GPIO_SD_B2_00,
        pub p01: GPIO_SD_B2_01,
        pub p02: GPIO_SD_B2_02,
        pub p03: GPIO_SD_B2_03,
        pub p04: GPIO_SD_B2_04,
        pub p05: GPIO_SD_B2_05,
        pub p06: GPIO_SD_B2_06,
        pub p07: GPIO_SD_B2_07,
        pub p08: GPIO_SD_B2_08,
        pub p09: GPIO_SD_B2_09,
        pub p10: GPIO_SD_B2_10,
        pub p11: GPIO_SD_B2_11,
    }
    /// Erased pads with prefix GPIO_SD_B2.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 12];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_SD_B2_00::new(),
                p01: GPIO_SD_B2_01::new(),
                p02: GPIO_SD_B2_02::new(),
                p03: GPIO_SD_B2_03::new(),
                p04: GPIO_SD_B2_04::new(),
                p05: GPIO_SD_B2_05::new(),
                p06: GPIO_SD_B2_06::new(),
                p07: GPIO_SD_B2_07::new(),
                p08: GPIO_SD_B2_08::new(),
                p09: GPIO_SD_B2_09::new(),
                p10: GPIO_SD_B2_10::new(),
                p11: GPIO_SD_B2_11::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
                self.p06.erase(),
                self.p07.erase(),
                self.p08.erase(),
                self.p09.erase(),
                self.p10.erase(),
                self.p11.erase(),
            ]
        }
    }
}

/// Pads with the prefix GPIO_DISP_B1.
pub mod gpio_disp_b1 {

    const GPIO_DISP_B1_00_MUX_ADDR: u32 = 0x400e81e4;
    const GPIO_DISP_B1_00_PAD_ADDR: u32 = 0x400e8428;
    pub type GPIO_DISP_B1_00 = crate::Pad<GPIO_DISP_B1_00_MUX_ADDR, GPIO_DISP_B1_00_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 21;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 21;
    }

    const GPIO_DISP_B1_01_MUX_ADDR: u32 = 0x400e81e8;
    const GPIO_DISP_B1_01_PAD_ADDR: u32 = 0x400e842c;
    pub type GPIO_DISP_B1_01 = crate::Pad<GPIO_DISP_B1_01_MUX_ADDR, GPIO_DISP_B1_01_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 22;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 22;
    }

    const GPIO_DISP_B1_02_MUX_ADDR: u32 = 0x400e81ec;
    const GPIO_DISP_B1_02_PAD_ADDR: u32 = 0x400e8430;
    pub type GPIO_DISP_B1_02 = crate::Pad<GPIO_DISP_B1_02_MUX_ADDR, GPIO_DISP_B1_02_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 23;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 23;
    }

    const GPIO_DISP_B1_03_MUX_ADDR: u32 = 0x400e81f0;
    const GPIO_DISP_B1_03_PAD_ADDR: u32 = 0x400e8434;
    pub type GPIO_DISP_B1_03 = crate::Pad<GPIO_DISP_B1_03_MUX_ADDR, GPIO_DISP_B1_03_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 24;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 24;
    }

    const GPIO_DISP_B1_04_MUX_ADDR: u32 = 0x400e81f4;
    const GPIO_DISP_B1_04_PAD_ADDR: u32 = 0x400e8438;
    pub type GPIO_DISP_B1_04 = crate::Pad<GPIO_DISP_B1_04_MUX_ADDR, GPIO_DISP_B1_04_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 25;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 25;
    }

    const GPIO_DISP_B1_05_MUX_ADDR: u32 = 0x400e81f8;
    const GPIO_DISP_B1_05_PAD_ADDR: u32 = 0x400e843c;
    pub type GPIO_DISP_B1_05 = crate::Pad<GPIO_DISP_B1_05_MUX_ADDR, GPIO_DISP_B1_05_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 26;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 26;
    }

    const GPIO_DISP_B1_06_MUX_ADDR: u32 = 0x400e81fc;
    const GPIO_DISP_B1_06_PAD_ADDR: u32 = 0x400e8440;
    pub type GPIO_DISP_B1_06 = crate::Pad<GPIO_DISP_B1_06_MUX_ADDR, GPIO_DISP_B1_06_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_06 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 27;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_06 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 27;
    }

    const GPIO_DISP_B1_07_MUX_ADDR: u32 = 0x400e8200;
    const GPIO_DISP_B1_07_PAD_ADDR: u32 = 0x400e8444;
    pub type GPIO_DISP_B1_07 = crate::Pad<GPIO_DISP_B1_07_MUX_ADDR, GPIO_DISP_B1_07_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_07 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 28;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_07 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 28;
    }

    const GPIO_DISP_B1_08_MUX_ADDR: u32 = 0x400e8204;
    const GPIO_DISP_B1_08_PAD_ADDR: u32 = 0x400e8448;
    pub type GPIO_DISP_B1_08 = crate::Pad<GPIO_DISP_B1_08_MUX_ADDR, GPIO_DISP_B1_08_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_08 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 29;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_08 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 29;
    }

    const GPIO_DISP_B1_09_MUX_ADDR: u32 = 0x400e8208;
    const GPIO_DISP_B1_09_PAD_ADDR: u32 = 0x400e844c;
    pub type GPIO_DISP_B1_09 = crate::Pad<GPIO_DISP_B1_09_MUX_ADDR, GPIO_DISP_B1_09_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_09 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 30;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_09 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 30;
    }

    const GPIO_DISP_B1_10_MUX_ADDR: u32 = 0x400e820c;
    const GPIO_DISP_B1_10_PAD_ADDR: u32 = 0x400e8450;
    pub type GPIO_DISP_B1_10 = crate::Pad<GPIO_DISP_B1_10_MUX_ADDR, GPIO_DISP_B1_10_PAD_ADDR>;

    impl crate::gpio::Pin<4> for GPIO_DISP_B1_10 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 31;
    }

    impl crate::gpio::Pin<10> for GPIO_DISP_B1_10 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 31;
    }

    const GPIO_DISP_B1_11_MUX_ADDR: u32 = 0x400e8210;
    const GPIO_DISP_B1_11_PAD_ADDR: u32 = 0x400e8454;
    pub type GPIO_DISP_B1_11 = crate::Pad<GPIO_DISP_B1_11_MUX_ADDR, GPIO_DISP_B1_11_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B1_11 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 0;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B1_11 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 0;
    }

    /// All pads with prefix GPIO_DISP_B1.
    pub struct Pads {
        pub p00: GPIO_DISP_B1_00,
        pub p01: GPIO_DISP_B1_01,
        pub p02: GPIO_DISP_B1_02,
        pub p03: GPIO_DISP_B1_03,
        pub p04: GPIO_DISP_B1_04,
        pub p05: GPIO_DISP_B1_05,
        pub p06: GPIO_DISP_B1_06,
        pub p07: GPIO_DISP_B1_07,
        pub p08: GPIO_DISP_B1_08,
        pub p09: GPIO_DISP_B1_09,
        pub p10: GPIO_DISP_B1_10,
        pub p11: GPIO_DISP_B1_11,
    }
    /// Erased pads with prefix GPIO_DISP_B1.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 12];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_DISP_B1_00::new(),
                p01: GPIO_DISP_B1_01::new(),
                p02: GPIO_DISP_B1_02::new(),
                p03: GPIO_DISP_B1_03::new(),
                p04: GPIO_DISP_B1_04::new(),
                p05: GPIO_DISP_B1_05::new(),
                p06: GPIO_DISP_B1_06::new(),
                p07: GPIO_DISP_B1_07::new(),
                p08: GPIO_DISP_B1_08::new(),
                p09: GPIO_DISP_B1_09::new(),
                p10: GPIO_DISP_B1_10::new(),
                p11: GPIO_DISP_B1_11::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
                self.p06.erase(),
                self.p07.erase(),
                self.p08.erase(),
                self.p09.erase(),
                self.p10.erase(),
                self.p11.erase(),
            ]
        }
    }
}

/// Pads with the prefix GPIO_DISP_B2.
pub mod gpio_disp_b2 {

    const GPIO_DISP_B2_00_MUX_ADDR: u32 = 0x400e8214;
    const GPIO_DISP_B2_00_PAD_ADDR: u32 = 0x400e8458;
    pub type GPIO_DISP_B2_00 = crate::Pad<GPIO_DISP_B2_00_MUX_ADDR, GPIO_DISP_B2_00_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 1;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 1;
    }

    const GPIO_DISP_B2_01_MUX_ADDR: u32 = 0x400e8218;
    const GPIO_DISP_B2_01_PAD_ADDR: u32 = 0x400e845c;
    pub type GPIO_DISP_B2_01 = crate::Pad<GPIO_DISP_B2_01_MUX_ADDR, GPIO_DISP_B2_01_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 2;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 2;
    }

    const GPIO_DISP_B2_02_MUX_ADDR: u32 = 0x400e821c;
    const GPIO_DISP_B2_02_PAD_ADDR: u32 = 0x400e8460;
    pub type GPIO_DISP_B2_02 = crate::Pad<GPIO_DISP_B2_02_MUX_ADDR, GPIO_DISP_B2_02_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 3;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 3;
    }

    const GPIO_DISP_B2_03_MUX_ADDR: u32 = 0x400e8220;
    const GPIO_DISP_B2_03_PAD_ADDR: u32 = 0x400e8464;
    pub type GPIO_DISP_B2_03 = crate::Pad<GPIO_DISP_B2_03_MUX_ADDR, GPIO_DISP_B2_03_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 4;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 4;
    }

    const GPIO_DISP_B2_04_MUX_ADDR: u32 = 0x400e8224;
    const GPIO_DISP_B2_04_PAD_ADDR: u32 = 0x400e8468;
    pub type GPIO_DISP_B2_04 = crate::Pad<GPIO_DISP_B2_04_MUX_ADDR, GPIO_DISP_B2_04_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 5;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 5;
    }

    const GPIO_DISP_B2_05_MUX_ADDR: u32 = 0x400e8228;
    const GPIO_DISP_B2_05_PAD_ADDR: u32 = 0x400e846c;
    pub type GPIO_DISP_B2_05 = crate::Pad<GPIO_DISP_B2_05_MUX_ADDR, GPIO_DISP_B2_05_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 6;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 6;
    }

    const GPIO_DISP_B2_06_MUX_ADDR: u32 = 0x400e822c;
    const GPIO_DISP_B2_06_PAD_ADDR: u32 = 0x400e8470;
    pub type GPIO_DISP_B2_06 = crate::Pad<GPIO_DISP_B2_06_MUX_ADDR, GPIO_DISP_B2_06_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_06 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 7;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_06 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 7;
    }

    const GPIO_DISP_B2_07_MUX_ADDR: u32 = 0x400e8230;
    const GPIO_DISP_B2_07_PAD_ADDR: u32 = 0x400e8474;
    pub type GPIO_DISP_B2_07 = crate::Pad<GPIO_DISP_B2_07_MUX_ADDR, GPIO_DISP_B2_07_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_07 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 8;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_07 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 8;
    }

    const GPIO_DISP_B2_08_MUX_ADDR: u32 = 0x400e8234;
    const GPIO_DISP_B2_08_PAD_ADDR: u32 = 0x400e8478;
    pub type GPIO_DISP_B2_08 = crate::Pad<GPIO_DISP_B2_08_MUX_ADDR, GPIO_DISP_B2_08_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_08 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 9;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_08 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 9;
    }

    const GPIO_DISP_B2_09_MUX_ADDR: u32 = 0x400e8238;
    const GPIO_DISP_B2_09_PAD_ADDR: u32 = 0x400e847c;
    pub type GPIO_DISP_B2_09 = crate::Pad<GPIO_DISP_B2_09_MUX_ADDR, GPIO_DISP_B2_09_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_09 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 10;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_09 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 10;
    }

    const GPIO_DISP_B2_10_MUX_ADDR: u32 = 0x400e823c;
    const GPIO_DISP_B2_10_PAD_ADDR: u32 = 0x400e8480;
    pub type GPIO_DISP_B2_10 = crate::Pad<GPIO_DISP_B2_10_MUX_ADDR, GPIO_DISP_B2_10_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_10 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 11;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_10 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 11;
    }

    const GPIO_DISP_B2_11_MUX_ADDR: u32 = 0x400e8240;
    const GPIO_DISP_B2_11_PAD_ADDR: u32 = 0x400e8484;
    pub type GPIO_DISP_B2_11 = crate::Pad<GPIO_DISP_B2_11_MUX_ADDR, GPIO_DISP_B2_11_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_11 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 12;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_11 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 12;
    }

    const GPIO_DISP_B2_12_MUX_ADDR: u32 = 0x400e8244;
    const GPIO_DISP_B2_12_PAD_ADDR: u32 = 0x400e8488;
    pub type GPIO_DISP_B2_12 = crate::Pad<GPIO_DISP_B2_12_MUX_ADDR, GPIO_DISP_B2_12_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_12 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 13;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_12 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 13;
    }

    const GPIO_DISP_B2_13_MUX_ADDR: u32 = 0x400e8248;
    const GPIO_DISP_B2_13_PAD_ADDR: u32 = 0x400e848c;
    pub type GPIO_DISP_B2_13 = crate::Pad<GPIO_DISP_B2_13_MUX_ADDR, GPIO_DISP_B2_13_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_13 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 14;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_13 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 14;
    }

    const GPIO_DISP_B2_14_MUX_ADDR: u32 = 0x400e824c;
    const GPIO_DISP_B2_14_PAD_ADDR: u32 = 0x400e8490;
    pub type GPIO_DISP_B2_14 = crate::Pad<GPIO_DISP_B2_14_MUX_ADDR, GPIO_DISP_B2_14_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_14 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 15;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_14 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 15;
    }

    const GPIO_DISP_B2_15_MUX_ADDR: u32 = 0x400e8250;
    const GPIO_DISP_B2_15_PAD_ADDR: u32 = 0x400e8494;
    pub type GPIO_DISP_B2_15 = crate::Pad<GPIO_DISP_B2_15_MUX_ADDR, GPIO_DISP_B2_15_PAD_ADDR>;

    impl crate::gpio::Pin<5> for GPIO_DISP_B2_15 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 16;
    }

    impl crate::gpio::Pin<11> for GPIO_DISP_B2_15 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 16;
    }

    /// All pads with prefix GPIO_DISP_B2.
    pub struct Pads {
        pub p00: GPIO_DISP_B2_00,
        pub p01: GPIO_DISP_B2_01,
        pub p02: GPIO_DISP_B2_02,
        pub p03: GPIO_DISP_B2_03,
        pub p04: GPIO_DISP_B2_04,
        pub p05: GPIO_DISP_B2_05,
        pub p06: GPIO_DISP_B2_06,
        pub p07: GPIO_DISP_B2_07,
        pub p08: GPIO_DISP_B2_08,
        pub p09: GPIO_DISP_B2_09,
        pub p10: GPIO_DISP_B2_10,
        pub p11: GPIO_DISP_B2_11,
        pub p12: GPIO_DISP_B2_12,
        pub p13: GPIO_DISP_B2_13,
        pub p14: GPIO_DISP_B2_14,
        pub p15: GPIO_DISP_B2_15,
    }
    /// Erased pads with prefix GPIO_DISP_B2.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 16];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_DISP_B2_00::new(),
                p01: GPIO_DISP_B2_01::new(),
                p02: GPIO_DISP_B2_02::new(),
                p03: GPIO_DISP_B2_03::new(),
                p04: GPIO_DISP_B2_04::new(),
                p05: GPIO_DISP_B2_05::new(),
                p06: GPIO_DISP_B2_06::new(),
                p07: GPIO_DISP_B2_07::new(),
                p08: GPIO_DISP_B2_08::new(),
                p09: GPIO_DISP_B2_09::new(),
                p10: GPIO_DISP_B2_10::new(),
                p11: GPIO_DISP_B2_11::new(),
                p12: GPIO_DISP_B2_12::new(),
                p13: GPIO_DISP_B2_13::new(),
                p14: GPIO_DISP_B2_14::new(),
                p15: GPIO_DISP_B2_15::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
                self.p06.erase(),
                self.p07.erase(),
                self.p08.erase(),
                self.p09.erase(),
                self.p10.erase(),
                self.p11.erase(),
                self.p12.erase(),
                self.p13.erase(),
                self.p14.erase(),
                self.p15.erase(),
            ]
        }
    }
}

/// Pads with the prefix GPIO_LPSR.
pub mod gpio_lpsr {

    const GPIO_LPSR_00_MUX_ADDR: u32 = 0x40c08000;
    const GPIO_LPSR_00_PAD_ADDR: u32 = 0x40c08040;
    pub type GPIO_LPSR_00 = crate::Pad<GPIO_LPSR_00_MUX_ADDR, GPIO_LPSR_00_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_00 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 0;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_00 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 0;
    }

    const GPIO_LPSR_01_MUX_ADDR: u32 = 0x40c08004;
    const GPIO_LPSR_01_PAD_ADDR: u32 = 0x40c08044;
    pub type GPIO_LPSR_01 = crate::Pad<GPIO_LPSR_01_MUX_ADDR, GPIO_LPSR_01_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_01 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 1;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_01 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 1;
    }

    const GPIO_LPSR_02_MUX_ADDR: u32 = 0x40c08008;
    const GPIO_LPSR_02_PAD_ADDR: u32 = 0x40c08048;
    pub type GPIO_LPSR_02 = crate::Pad<GPIO_LPSR_02_MUX_ADDR, GPIO_LPSR_02_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_02 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 2;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_02 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 2;
    }

    const GPIO_LPSR_03_MUX_ADDR: u32 = 0x40c0800c;
    const GPIO_LPSR_03_PAD_ADDR: u32 = 0x40c0804c;
    pub type GPIO_LPSR_03 = crate::Pad<GPIO_LPSR_03_MUX_ADDR, GPIO_LPSR_03_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_03 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 3;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_03 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 3;
    }

    const GPIO_LPSR_04_MUX_ADDR: u32 = 0x40c08010;
    const GPIO_LPSR_04_PAD_ADDR: u32 = 0x40c08050;
    pub type GPIO_LPSR_04 = crate::Pad<GPIO_LPSR_04_MUX_ADDR, GPIO_LPSR_04_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_04 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 4;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_04 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 4;
    }

    const GPIO_LPSR_05_MUX_ADDR: u32 = 0x40c08014;
    const GPIO_LPSR_05_PAD_ADDR: u32 = 0x40c08054;
    pub type GPIO_LPSR_05 = crate::Pad<GPIO_LPSR_05_MUX_ADDR, GPIO_LPSR_05_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_05 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 5;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_05 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 5;
    }

    const GPIO_LPSR_06_MUX_ADDR: u32 = 0x40c08018;
    const GPIO_LPSR_06_PAD_ADDR: u32 = 0x40c08058;
    pub type GPIO_LPSR_06 = crate::Pad<GPIO_LPSR_06_MUX_ADDR, GPIO_LPSR_06_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_06 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 6;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_06 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 6;
    }

    const GPIO_LPSR_07_MUX_ADDR: u32 = 0x40c0801c;
    const GPIO_LPSR_07_PAD_ADDR: u32 = 0x40c0805c;
    pub type GPIO_LPSR_07 = crate::Pad<GPIO_LPSR_07_MUX_ADDR, GPIO_LPSR_07_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_07 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 7;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_07 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 7;
    }

    const GPIO_LPSR_08_MUX_ADDR: u32 = 0x40c08020;
    const GPIO_LPSR_08_PAD_ADDR: u32 = 0x40c08060;
    pub type GPIO_LPSR_08 = crate::Pad<GPIO_LPSR_08_MUX_ADDR, GPIO_LPSR_08_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_08 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 8;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_08 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 8;
    }

    const GPIO_LPSR_09_MUX_ADDR: u32 = 0x40c08024;
    const GPIO_LPSR_09_PAD_ADDR: u32 = 0x40c08064;
    pub type GPIO_LPSR_09 = crate::Pad<GPIO_LPSR_09_MUX_ADDR, GPIO_LPSR_09_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_09 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 9;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_09 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 9;
    }

    const GPIO_LPSR_10_MUX_ADDR: u32 = 0x40c08028;
    const GPIO_LPSR_10_PAD_ADDR: u32 = 0x40c08068;
    pub type GPIO_LPSR_10 = crate::Pad<GPIO_LPSR_10_MUX_ADDR, GPIO_LPSR_10_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_10 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 10;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_10 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 10;
    }

    const GPIO_LPSR_11_MUX_ADDR: u32 = 0x40c0802c;
    const GPIO_LPSR_11_PAD_ADDR: u32 = 0x40c0806c;
    pub type GPIO_LPSR_11 = crate::Pad<GPIO_LPSR_11_MUX_ADDR, GPIO_LPSR_11_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_11 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 11;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_11 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 11;
    }

    const GPIO_LPSR_12_MUX_ADDR: u32 = 0x40c08030;
    const GPIO_LPSR_12_PAD_ADDR: u32 = 0x40c08070;
    pub type GPIO_LPSR_12 = crate::Pad<GPIO_LPSR_12_MUX_ADDR, GPIO_LPSR_12_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_12 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 12;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_12 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 12;
    }

    const GPIO_LPSR_13_MUX_ADDR: u32 = 0x40c08034;
    const GPIO_LPSR_13_PAD_ADDR: u32 = 0x40c08074;
    pub type GPIO_LPSR_13 = crate::Pad<GPIO_LPSR_13_MUX_ADDR, GPIO_LPSR_13_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_13 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 13;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_13 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 13;
    }

    const GPIO_LPSR_14_MUX_ADDR: u32 = 0x40c08038;
    const GPIO_LPSR_14_PAD_ADDR: u32 = 0x40c08078;
    pub type GPIO_LPSR_14 = crate::Pad<GPIO_LPSR_14_MUX_ADDR, GPIO_LPSR_14_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_14 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 14;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_14 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 14;
    }

    const GPIO_LPSR_15_MUX_ADDR: u32 = 0x40c0803c;
    const GPIO_LPSR_15_PAD_ADDR: u32 = 0x40c0807c;
    pub type GPIO_LPSR_15 = crate::Pad<GPIO_LPSR_15_MUX_ADDR, GPIO_LPSR_15_PAD_ADDR>;

    impl crate::gpio::Pin<6> for GPIO_LPSR_15 {
        const ALT: u32 = 5;
        const OFFSET: u32 = 15;
    }

    impl crate::gpio::Pin<12> for GPIO_LPSR_15 {
        const ALT: u32 = 10;
        const OFFSET: u32 = 15;
    }

    /// All pads with prefix GPIO_LPSR.
    pub struct Pads {
        pub p00: GPIO_LPSR_00,
        pub p01: GPIO_LPSR_01,
        pub p02: GPIO_LPSR_02,
        pub p03: GPIO_LPSR_03,
        pub p04: GPIO_LPSR_04,
        pub p05: GPIO_LPSR_05,
        pub p06: GPIO_LPSR_06,
        pub p07: GPIO_LPSR_07,
        pub p08: GPIO_LPSR_08,
        pub p09: GPIO_LPSR_09,
        pub p10: GPIO_LPSR_10,
        pub p11: GPIO_LPSR_11,
        pub p12: GPIO_LPSR_12,
        pub p13: GPIO_LPSR_13,
        pub p14: GPIO_LPSR_14,
        pub p15: GPIO_LPSR_15,
    }
    /// Erased pads with prefix GPIO_LPSR.
    ///
    /// Use [`Pads::erase()`] to get an `ErasedPads` instance.
    pub type ErasedPads = [crate::ErasedPad; 16];
    impl Pads {
        /// Take all pads from this group
        ///
        /// # Safety
        ///
        /// You may safely call this once to acquire all of the pads.
        /// Subsequent calls may return pads that are mutably aliased
        /// elsewhere. Consider calling new() at the start of your program.
        #[inline]
        pub const unsafe fn new() -> Self {
            Self {
                p00: GPIO_LPSR_00::new(),
                p01: GPIO_LPSR_01::new(),
                p02: GPIO_LPSR_02::new(),
                p03: GPIO_LPSR_03::new(),
                p04: GPIO_LPSR_04::new(),
                p05: GPIO_LPSR_05::new(),
                p06: GPIO_LPSR_06::new(),
                p07: GPIO_LPSR_07::new(),
                p08: GPIO_LPSR_08::new(),
                p09: GPIO_LPSR_09::new(),
                p10: GPIO_LPSR_10::new(),
                p11: GPIO_LPSR_11::new(),
                p12: GPIO_LPSR_12::new(),
                p13: GPIO_LPSR_13::new(),
                p14: GPIO_LPSR_14::new(),
                p15: GPIO_LPSR_15::new(),
            }
        }

        /// Erase all of the pads
        ///
        /// The return type is an array, where the index indicates the
        /// pad offset from the start of the group. For example, AD_B0_03
        /// would be referenced as erased_pads\[3\].
        ///
        /// See `ErasedPads` for more information.
        #[inline]
        pub const fn erase(self) -> ErasedPads {
            [
                self.p00.erase(),
                self.p01.erase(),
                self.p02.erase(),
                self.p03.erase(),
                self.p04.erase(),
                self.p05.erase(),
                self.p06.erase(),
                self.p07.erase(),
                self.p08.erase(),
                self.p09.erase(),
                self.p10.erase(),
                self.p11.erase(),
                self.p12.erase(),
                self.p13.erase(),
                self.p14.erase(),
                self.p15.erase(),
            ]
        }
    }
}

/// All of the pads.
pub struct Pads {
    pub gpio_emc_b1: gpio_emc_b1::Pads,
    pub gpio_emc_b2: gpio_emc_b2::Pads,
    pub gpio_ad: gpio_ad::Pads,
    pub gpio_sd_b1: gpio_sd_b1::Pads,
    pub gpio_sd_b2: gpio_sd_b2::Pads,
    pub gpio_disp_b1: gpio_disp_b1::Pads,
    pub gpio_disp_b2: gpio_disp_b2::Pads,
    pub gpio_lpsr: gpio_lpsr::Pads,
}

impl Pads {
    /// Take all pads from this group
    ///
    /// # Safety
    ///
    /// You may safely call this once to acquire all of the pads.
    /// Subsequent calls may return pads that are mutably aliased
    /// elsewhere. Consider calling new() at the start of your program.
    #[inline]
    pub const unsafe fn new() -> Self {
        Self {
            gpio_emc_b1: gpio_emc_b1::Pads::new(),
            gpio_emc_b2: gpio_emc_b2::Pads::new(),
            gpio_ad: gpio_ad::Pads::new(),
            gpio_sd_b1: gpio_sd_b1::Pads::new(),
            gpio_sd_b2: gpio_sd_b2::Pads::new(),
            gpio_disp_b1: gpio_disp_b1::Pads::new(),
            gpio_disp_b2: gpio_disp_b2::Pads::new(),
            gpio_lpsr: gpio_lpsr::Pads::new(),
        }
    }

    /// Erase all of the pads
    ///
    /// The return type is an array, where the index indicates the
    /// pad offset from the start of the group. For example, AD_B0_03
    /// would be referenced as erased_pads\[3\].
    ///
    /// See `ErasedPads` for more information.
    #[inline]
    pub const fn erase(self) -> ErasedPads {
        ErasedPads {
            gpio_emc_b1: self.gpio_emc_b1.erase(),
            gpio_emc_b2: self.gpio_emc_b2.erase(),
            gpio_ad: self.gpio_ad.erase(),
            gpio_sd_b1: self.gpio_sd_b1.erase(),
            gpio_sd_b2: self.gpio_sd_b2.erase(),
            gpio_disp_b1: self.gpio_disp_b1.erase(),
            gpio_disp_b2: self.gpio_disp_b2.erase(),
            gpio_lpsr: self.gpio_lpsr.erase(),
        }
    }
}

/// All erased pads.
pub struct ErasedPads {
    pub gpio_emc_b1: gpio_emc_b1::ErasedPads,
    pub gpio_emc_b2: gpio_emc_b2::ErasedPads,
    pub gpio_ad: gpio_ad::ErasedPads,
    pub gpio_sd_b1: gpio_sd_b1::ErasedPads,
    pub gpio_sd_b2: gpio_sd_b2::ErasedPads,
    pub gpio_disp_b1: gpio_disp_b1::ErasedPads,
    pub gpio_disp_b2: gpio_disp_b2::ErasedPads,
    pub gpio_lpsr: gpio_lpsr::ErasedPads,
}
